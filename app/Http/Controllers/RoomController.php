<?php
namespace App\Http\Controllers;
use App\Models\OrderService;
use App\Models\Room;
use App\Models\RoomCart;
use App\Models\RoomUsage;
use Illuminate\Http\Request;
use App\Models\OrderDetail;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
class RoomController extends Controller
{
    // L·∫•y danh s√°ch ph√≤ng
    public function index()
    {
        $rooms = Room::all();
        return response()->json([
            'message' => 'Danh s√°ch ph√≤ng h√°t',
            'rooms' => $rooms
        ], 200);
    }
    // B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng ph√≤ng
    public function startRoom(Request $request, $id)
    {
        $room = Room::findOrFail($id);
        if ($room->status !== 'Tr·ªëng') {
            return response()->json(['message' => 'Ph√≤ng n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!'], 400);
        }
        $checkInTime = Carbon::now();
        $roomUsage = RoomUsage::create([
            'room_id' => $id,
            'check_in_time' => $checkInTime,
        ]);
        $room->update(['status' => 'ƒêang s·ª≠ d·ª•ng']);
        return response()->json([
            'message' => 'Ph√≤ng ƒë√£ ƒë∆∞·ª£c b·∫≠t !',
            'room_id' => $room->id,
            'room_name' => $room->name,
            'status' => $room->status,
            'check_in_time' => $roomUsage->check_in_time,
        ]);
    }
    // L·∫•y gi√° ti·ªÅn hi·ªán t·∫°i
    public function checkoutRoom(Request $request, $roomId)
    {
        // 1Ô∏è‚É£ Ki·ªÉm tra ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
        $room = Room::find($roomId);
        if (!$room) {
            return response()->json(['message' => 'Ph√≤ng kh√¥ng t·ªìn t·∫°i'], 404);
        }

        // 2Ô∏è‚É£ Ki·ªÉm tra ph√≤ng c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng
        if ($room->status !== 'ƒêang s·ª≠ d·ª•ng') {
            return response()->json(['message' => 'Ph√≤ng ch∆∞a c√≥ kh√°ch ho·∫∑c ƒë√£ thanh to√°n'], 400);
        }

        // 3Ô∏è‚É£ L·∫•y th√¥ng tin s·ª≠ d·ª•ng ph√≤ng (check_in_time t·ª´ b·∫£ng room_usages)
        $roomUsage = RoomUsage::where('room_id', $roomId)->first();
        if (!$roomUsage || !$roomUsage->check_in_time) {
            return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y th·ªùi gian check-in c·ªßa ph√≤ng'], 400);
        }

        // 4Ô∏è‚É£ T√≠nh t·ªïng th·ªùi gian s·ª≠ d·ª•ng
        $checkInTime = Carbon::parse($roomUsage->check_in_time);
        $checkOutTime = Carbon::now();
        $totalMinutes = $checkInTime->diffInMinutes($checkOutTime);

        if ($totalMinutes <= 0) {
            return response()->json(['message' => 'Th·ªùi gian s·ª≠ d·ª•ng ph√≤ng kh√¥ng h·ª£p l·ªá'], 400);
        }

        // 5Ô∏è‚É£ T√≠nh ti·ªÅn gi·ªù h√°t
        $pricePerHour = $room->price_per_hour; // L·∫•y gi√° ph√≤ng
        $totalRoomPrice = ($totalMinutes / 60) * $pricePerHour;

        // 6Ô∏è‚É£ L·∫•y danh s√°ch d·ªãch v·ª• trong gi·ªè h√†ng
        $roomCart = RoomCart::where('room_id', $roomId)->with('service')->get();

        // 7Ô∏è‚É£ T√≠nh t·ªïng ti·ªÅn d·ªãch v·ª•, n·∫øu gi·ªè h√†ng tr·ªëng th√¨ b·∫±ng 0
        $totalServicePrice = 0;
        if (!$roomCart->isEmpty()) {
            foreach ($roomCart as $cartItem) {
                $totalServicePrice += $cartItem->service->price * $cartItem->quantity;
            }
        }

        // 8Ô∏è‚É£ T·ªïng ti·ªÅn cu·ªëi c√πng (ch·ªâ c√≥ ti·ªÅn ph√≤ng n·∫øu gi·ªè h√†ng tr·ªëng)
        $finalTotalPrice = $totalRoomPrice + $totalServicePrice;

        // 9Ô∏è‚É£ T√≠nh t·ªïng th·ªùi gian s·ª≠ d·ª•ng (gi·ªù & ph√∫t)
        $totalHours = floor($totalMinutes / 60);
        $totalRemainingMinutes = $totalMinutes % 60;
        $totalTimeUsed = "{$totalHours} gi·ªù {$totalRemainingMinutes} ph√∫t";

        DB::beginTransaction();
        try {
            // üîü L∆∞u v√†o `order_details`
            $order = OrderDetail::create([
                'room_id' => $roomId,
                'room_name' => $room->name,
                'check_in_time' => $checkInTime,
                'check_out_time' => $checkOutTime,
                'total_time_used' => $totalTimeUsed,
                'room_price' => round($totalRoomPrice, 2), // L∆∞u ti·ªÅn h√°t ri√™ng
                'service_price' => round($totalServicePrice, 2), // L∆∞u ti·ªÅn d·ªãch v·ª• ri√™ng
                'total_price' => round($finalTotalPrice, 2),
                'payment_method' => $request->payment_method ?? 'Ti·ªÅn m·∫∑t',
                'customer_paid' => $request->customer_paid,
                'change_amount' => max(0, $request->customer_paid - round($finalTotalPrice, 2)),
            ]);

            // 1Ô∏è‚É£1Ô∏è‚É£ L∆∞u d·ªãch v·ª• t·ª´ gi·ªè h√†ng v√†o `order_services` (ch·ªâ khi c√≥ d·ªãch v·ª•)
            if (!$roomCart->isEmpty()) {
                foreach ($roomCart as $cartItem) {
                    OrderService::create([
                        'order_id' => $order->id,
                        'service_id' => $cartItem->service_id,
                        'quantity' => $cartItem->quantity,
                        'price' => $cartItem->service->price * $cartItem->quantity,
                    ]);
                }
            }

            // 1Ô∏è‚É£2Ô∏è‚É£ X√≥a gi·ªè h√†ng sau khi thanh to√°n
            RoomCart::where('room_id', $roomId)->delete();

            // 1Ô∏è‚É£3Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng
            $room->update(['status' => 'Tr·ªëng']);

            // 1Ô∏è‚É£4Ô∏è‚É£ X√≥a d·ªØ li·ªáu ph√≤ng kh·ªèi b·∫£ng `room_usages`
            RoomUsage::where('room_id', $roomId)->delete();

            DB::commit();

            return response()->json([
                'message' => 'Thanh to√°n th√†nh c√¥ng',
                'data' => $order
            ], 200);
        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json(['message' => 'L·ªói thanh to√°n', 'error' => $e->getMessage()], 500);
        }
    }


    public function getRoomCurrentPrice($roomId)
    {
        // Ki·ªÉm tra ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
        $room = Room::find($roomId);
        if (!$room) {
            return response()->json(['message' => 'Ph√≤ng kh√¥ng t·ªìn t·∫°i'], 404);
        }

        // L·∫•y th√¥ng tin check-in t·ª´ room_usages
        $roomUsage = RoomUsage::where('room_id', $roomId)->first();
        if (!$roomUsage || !$roomUsage->check_in_time) {
            return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y th·ªùi gian check-in'], 400);
        }

        // T√≠nh th·ªùi gian ƒë√£ s·ª≠ d·ª•ng
        $checkInTime = Carbon::parse($roomUsage->check_in_time);
        $currentTime = Carbon::now();
        $totalMinutes = $checkInTime->diffInMinutes($currentTime);

        // N·∫øu d∆∞·ªõi 2 ph√∫t, tr·∫£ v·ªÅ 0
        if ($totalMinutes < 2) {
            return response()->json([
                'message' => 'Ch∆∞a ƒë·ªß 2 ph√∫t s·ª≠ d·ª•ng',
                'total_price' => 0
            ], 200);
        }

        // T√≠nh ti·ªÅn d·ª±a tr√™n gi√° ph√≤ng theo gi·ªù
        $pricePerHour = $room->price_per_hour;
        $totalPrice = ($totalMinutes / 60) * $pricePerHour;

        return response()->json([
            'message' => 'T·ªïng ti·ªÅn h√°t hi·ªán t·∫°i',
            'total_price' => round($totalPrice, 2)
        ], 200);
    }

    // Xem th√¥ng tin ph√≤ng
    public function show($id)
    {
        $room = Room::with(['roomUsage' => function ($query) {
            $query->latest()->first();
        }])->findOrFail($id);

        return response()->json([
            'id' => $room->id,
            'name' => $room->name,
            'status' => $room->status,
            'check_in_time' => optional($room->roomUsage)->check_in_time,
            'check_out_time' => optional($room->roomUsage)->check_out_time,
            'total_price' => optional($room->roomUsage)->total_price,
        ]);
    }
}
